services:
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3333:3333"
    environment:
      - REACT_APP_API_URL=http://localhost:5555/api
      - PUBLIC_URL=http://localhost:3333
      - WDS_SOCKET_PORT=0
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./src/frontend:/app
      - ./src/frontend/public:/app/public
      - /app/node_modules
      - /app/build
      - eslint-cache:/app/node_modules/.cache
    networks:
      - slls-network
    restart: unless-stopped

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: /bin/sh -c "
      npm install;
      while ! nc -z postgres 5432;
      do
        echo 'Waiting for PostgreSQL to be ready...';
        sleep 2;
      done;
      echo 'PostgreSQL is ready!';
      sleep 5;
      node scripts/seed.js && npm start"
    ports:
      - "5555:5555"
    environment:
      - PORT=5555
      - NODE_ENV=development
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=slls_legal_clinic
      - DB_HOST=postgres
      - DB_PORT=5432
      - JWT_SECRET=your-secret-key-here
      - JWT_EXPIRY=24h
      - CORS_ORIGIN=http://localhost:3333
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src/backend:/app
      - /app/node_modules
      - ./src/backend/uploads:/app/uploads
    networks:
      - slls-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=slls_legal_clinic
      - LANG=en_US.utf8
      - LC_ALL=en_US.utf8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - slls-network
    restart: unless-stopped
    command: postgres -c 'max_connections=100'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  slls-network:
    driver: bridge

volumes:
  postgres-data:
  eslint-cache:
